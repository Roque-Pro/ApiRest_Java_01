objetivo:
Criar uma api restful para controle de produto


1 - Modelo:
    produto: id, nome, quantidade, valor, observação

    package com.teste.primeiroexemplo.model;

public class Produto {

    //#region ATRIBUTOS

   

    private int id;

    private String nome;

    private int quantidade;

    private double valor;
    
    private String observacao;

    //#endregion 

     //#region gETTERS E SETTERS

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(int quantidade) {
        this.quantidade = quantidade;
    }

    public double getValor() {
        return valor;
    }

    public void setValor(double valor) {
        this.valor = valor;
    }

    public String getObservacao() {
        return observacao;
    }

    public void setObservacao(String observacao) {
        this.observacao = observacao;
    }

    //#endregion

}


2 - Repositório de produto:
    obterTodos, obterPorId, cadastrar-adcionar, atualizar produto, deletar. ->> CRUD

package com.teste.primeiroexemplo.repository;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Repository;
import com.teste.primeiroexemplo.model.Produto;

@Repository

public class ProdutoRepository {

    private ArrayList<Produto> produtos = new ArrayList<Produto>();
    private int ultimoId = 0;

    /* Metodo Retorna lista de Produtos */
    public List<Produto> obterTodos(){
        return produtos;

        
    }
    /** Metodo para obter Produto
     * @param id que sera localizado
     * @return retorna um produto caso tenha encontrado.
     */
    public Optional<Produto> obterPorId(int id) {
        return produtos.stream().filter(produto -> produto.getId() == id)
        .findFirst();
    }   

     /**Metodo para adcionar Produto
     * @param produto que sera adcionado
     * @return retorna produto que foi adcionado a lista.
     */

    public Produto adcionar(Produto produto){
        ultimoId++;
        produto.setId(ultimoId);
        produtos.add(produto);
        return produto;
    }

      /**Metodo para deletar Produto por Id
     * @param id do produto a ser deletado
     */

    public void deletar(int id){
        produtos.removeIf(produto -> produto.getId() == id);

    }

    /**Metodo para atualizar produto na lista
     *@param produto que será atualizado
     *@return retorna o produto apos atualizar lista 
     */
    public Produto atualizar(Produto produto){


        //Encontrar produto na lista
        Optional<Produto> produtoEncontrado =  obterPorId(produto.getId());

        if(produtoEncontrado.isEmpty()){
            throw new InputMismatchException("Produto não encontrado");

        }
        //Remover produto antigo da lista
        deletar(produto.getId());

        //Adcionar produto atualizado;
        produtos.add(produto);
        return produto;

        
    }
}


3 - Services - Serviço de Produto
    obterTodos, obterPorId, cadastrar-adcionar, atualizar produto, deletar. ->> CRUD 

    package com.teste.primeiroexemplo.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.teste.primeiroexemplo.model.Produto;
import com.teste.primeiroexemplo.repository.ProdutoRepository;

@Service
public class ProdutoService {
    
    @Autowired
    private ProdutoRepository produtoRepository;


     /**Metodo para adcionar Produto
     * @param produto que sera adcionado
     * @return retorna produto que foi adcionado a lista.
     */
    public List<Produto> obterTodos(){
        return produtoRepository.obterTodos();
    }

      /** Metodo para obter Produto
     * @param id que sera localizado
     * @return retorna um produto caso tenha encontrado.
     */
    public Optional<Produto> obterPorId(int id) {
       return produtoRepository.obterPorId(id);
    } 

       /**Metodo para adcionar Produto
     * @param produto que sera adcionado
     * @return retorna produto que foi adcionado a lista.
     */

    public Produto adcionar(Produto produto){
        /**Poderia ter regra de negocio para validar produto */
      return produtoRepository.adcionar(produto);
    }
        /**Metodo para deletar Produto por Id
     * @param id do produto a ser deletado
     */

    public void deletar(int id){
        produtoRepository.deletar(id);
    }

     /**Metodo para atualizar produto na lista
     *@param produto que será atualizado
     *@return retorna o produto apos atualizar lista 
     */
    public Produto atualizar(int id, Produto produto){
        //Poderia ter varicao no ID
        produto.setId(id);

        return produtoRepository.atualizar(produto);


        
    }
}
  

4 - Controller de produto
      obterTodos, obterPorId, cadastrar-adcionar, atualizar produto, deletar. ->> CRUD 

    package com.teste.primeiroexemplo.controller;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.teste.primeiroexemplo.model.Produto;
import com.teste.primeiroexemplo.services.ProdutoService;

@RestController
@RequestMapping("/api/produtos")

public class ProdutoController {
    @Autowired
    private ProdutoService ProdutoService;

    @GetMapping
    public List<Produto> obterTodos(){
        return ProdutoService.obterTodos();
    }
    @GetMapping("/{id}")
    public Optional<Produto> obterPorId(@PathVariable int id) {
        return ProdutoService.obterPorId(id);
    }  

    @PostMapping
    public Produto adicionar( @RequestBody Produto produto){
        return ProdutoService.adcionar(produto);
    }
    @DeleteMapping("/{id}")
    public String deletar(@PathVariable int id){
        ProdutoService.deletar(id);
        return "Produto com id: " + id + " foi deletado";
    }

    @PutMapping("/{id}")
    public Produto atualizar(@RequestBody Produto produto,@PathVariable int id){
        return ProdutoService.atualizar(id, produto);
    }
    
    
}

